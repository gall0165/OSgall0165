// XMega65 Kernal Development Template
// Each function of the kernal is a no-args function
// The functions are placed in the SYSCALLS table surrounded by JMP and NOP

#pragma cpu(rom6502)

import "string"

#pragma link("mega65hyper.ld")


const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char BLUE = 6;
const char WHITE = 1;

char[] MESSAGE = "checkpoint 5.3 gall0165";

const unsigned char STATE_NEW = $01;
const unsigned char STATE_READY = $02;
const unsigned char STATE_READYSUSPENDED = $03;
const unsigned char STATE_BLOCKEDSUSPENDED = $04;
const unsigned char STATE_BLOCKED = $05;
const unsigned char STATE_RUNNING = $06;
const unsigned char STATE_EXIT = $07;
const unsigned char STATE_NOTRUNNING = $00;

// Process Descriptor Block definition
struct process_descriptor_block { 
  unsigned char process_id;  
  unsigned char process_state;
  char* process_name;
  unsigned long storage_start_address;
  unsigned long storage_end_address;
  unsigned char * stored_state;
};

// Process stored state will live at $C000-$C7FF, with 256 bytes
// for each process reserved
const unsigned char *stored_pdbs = $C000;
// 8 processes x 16 bytes = 128 bytes for names
const char *process_names = $C800;
// 8 processes x 64 bytes context state = 512 bytes
const unsigned char *process_context_states = $C900;

// Which is the current running process?
volatile unsigned char running_pdb=$ff;

// Counter for helping determine the next available proccess ID.
volatile unsigned char pid_counter=0;

unsigned char next_free_pid()
{
  unsigned short i;

  // Start with the next process ID
  unsigned char pid=++pid_counter;
	
  // then make sure that it isn't currently in use by another process
  // This loop must terminate according to the Pigeon Hole Principlle,
  // i.e., there are more possible PIDs than there are processes, so
  // iterating through them will find at least one.
  unsigned char stepped=1;
  while(stepped) {
    stepped=0;
    for(i=0;i<8;i++) {
      struct process_descriptor_block *p
	=(struct process_descriptor_block*)((unsigned short)stored_pdbs+(i<<8));
      if (pid==p->process_id) { pid++; stepped=1; }
    }
  }
  
  return pid;
}

void describe_pdb(unsigned char pdb_number)
{
  unsigned char i;
  struct process_descriptor_block *p
    =(struct process_descriptor_block *)(((unsigned short)stored_pdbs)+(((unsigned short)pdb_number)<<8));

  print_to_screen("pdb#");
  print_hex((word)pdb_number);
  print_to_screen(":");
  print_newline();

  print_to_screen("  pid:          ");
  print_hex((word)p->process_id);
  print_newline();

  print_to_screen("  state:        ");
  switch(p->process_state) {
	case STATE_NEW: print_to_screen("new"); break;
	case STATE_RUNNING: print_to_screen("running"); break;
	case STATE_BLOCKED: print_to_screen("blocked"); break;
	case STATE_READY: print_to_screen("ready"); break;
	case STATE_BLOCKEDSUSPENDED: print_to_screen("blockedsuspended"); break;
	case STATE_READYSUSPENDED: print_to_screen("readysuspended"); break;
	case STATE_EXIT: print_to_screen("exit"); break;
	default:
	   // Unknown state
	   print_hex((word)p->process_state);
  }
  print_newline();

  print_to_screen("  process name: ");
  char *n=p->process_name;
  for(i=0;n[i];i++) {
    print_char(n[i]);
  }
  print_newline();

  print_to_screen("  mem start:    $");
  print_dhex(p->storage_start_address);
  print_newline();

  print_to_screen("  mem end:      $");
  print_dhex(p->storage_end_address);
  print_newline();

  print_to_screen("  pc:           $");
  unsigned short *ss=p->stored_state;
  print_hex(ss[4]);
  print_newline();


}

// Setup a new process descriptor block
void initialise_pdb(unsigned char pdb_number,char *name)
{
   //XXX - Copy from your os5.2.kc
   
  unsigned char i;

  struct process_descriptor_block *p
    =(struct process_descriptor_block *)(((unsigned short)stored_pdbs)+(((unsigned short)pdb_number)<<8));

  // Setup process ID
  //XXX - Call the function next_free_pid() to get a process ID for the
  //process in this PDB, and store it in p->process_id
  p->process_id = next_free_pid();
  
  // Setup process name 
  // (32 bytes space for each to fit 16 chars + nul)
  // (we could just use 17 bytes, but kickc can't multiply by 17)
  p->process_name=process_names+(((short)i)<<5);
  /*
  XXX - copy the string in the array 'name' into the array 'p->process_name'
  XXX - To make your life easier, do something like char *pn=p->process_name
        Then you can just do something along the lines of pn[...]=name[...] 
        in a loop to copy the name into place.
        (The arrays are both 17 bytes long)
  */
  char *pn=p->process_name;
  for(i=0;i<=17; i++){
     pn[i]=name[i];
  }
  // Set process state as not running.
  //XXX - Put the value STATE_NOTRUNNING into p->process_state
  p->process_state = STATE_NOTRUNNING;
  
  // Set stored memory area
  // (for now, we just use fixed 8KB steps from $30000-$3FFFF
  // corresponding to the PDB number
  /*
  //XXX - Set p->storage_start_address to the correct start address
  //      for a process that is in this PDB.
  //The correct address is $30000 + (((unsigned dword)pdb_number)*$2000);
  */
  p->storage_start_address = $30000 + (((unsigned dword)pdb_number)*$2000);
  
  /*
  XXX - Then do the same for the end address of the process
  This gets stored into p->storage_end_address and the correct
  address is $31FFF + (((unsigned dword)pdb_number)*$2000);
  */
  p->storage_end_address = $31FFF + (((unsigned dword)pdb_number)*$2000);
  // Initialise processor state for standard entry at $080D
  // Everything to zero, except for a few things we will set manually

  // 64 bytes context switching state for each process
  p->stored_state=process_context_states+(((unsigned short)pdb_number)<<6);
  unsigned char *ss=p->stored_state;

  //XXX - Set all 64 bytes of the array 'ss' to zero, to clear the context
  //      switching state
  for(i=0;i<63;i++) ss[i] = $00;

  // Set tandard CPU flags (8-bit stack, interrupts disabled)
  ss[7] = $24;

/*
  XXX - Set the stack pointer to $01FF
  (This requires a bit of fiddly pointer arithmetic, so to save you 
  the trouble working it out, you can use the following as the left 
  side of the expression:   *(unsigned short *)&ss[x] = ...
  where x is the offset of the stack pointer low byte (SPL) in the
  Hypervisor saved state registers in Appendix D of the MEGA65 User's
  Guide. i.e., if it were at $D640, x would be replaced with 0, and
  if it were at $D641, x would be replaced with 1, and so on.
  XXX - Note that the MEGA65 User's Guide has been updated on FLO.
  You will required the latest version, as otherwise SPL is not listed.
*/
 *(unsigned short *)&ss[5] = $1FFF;       //check this out
/* 
  XXX - Set the program counter to $080D
  (This requires a bit of fiddly pointer arithmetic, so to save you 
  the trouble working it out, you can use the following as the left 
  side of the expression:   *(unsigned short *)&ss[x] = ...
  where x is the offset of the program counter low byte (PCL) in the
  Hypervisor saved state registers in Appendix D of the MEGA65 User's
  Guide.
*/
 *(unsigned short *)&ss[8] = $080D;				//check this out

  return;
}

void resume_pdb(unsigned char pdb_number)
{
  struct process_descriptor_block *p
    =(struct process_descriptor_block *)(((unsigned short)stored_pdbs)+(((unsigned short)pdb_number)<<8));

  // Copy stored memory into place
  // Copy from $0000-$03FF and $0800-$1FFF, so that we don't overwrite
  // the screen
  
  //XXX - Copy $0400 bytes from p->storage_start_address to location $0000
  
  dma_copy((unsigned dword)(p->storage_start_address), $0000, $0400);
  
  /*
    XXX - Copy $1800 bytes from p->storage_start_address+$0800 to location $0800
        (Use (unsigned dword)(p->storage_start_address)+offset to pass these
         addresses in calls to dma_copy() to cast them to the correct type.)
  */
  
  
  dma_copy((unsigned dword)(p->storage_start_address), $0800, $0800, $1800);
  
  // Load stored CPU state into Hypervisor saved register area at $FFD3640
  unsigned char *ss=p->stored_state;
  /*
  XXX - Use a for() loop to copy 63 bytes from ss[0]--ss[62] to ((unsigned char *)$D640)[0]
        -- ((unsigned char *)$D640)[62] (dma_copy doesn't work for this for some slightly
        complex reasons.)
  */
  
  unsigned short i;
  for(i=0; i<63; i++){
  ((unsigned char*)$D640)[i] =  ss[i] ;
  
  // Set state of process to running
  //XXX - Set p->process_state to STATE_RUNNING
  p->process_state = STATE_RUNNING;
  
  // Mark this PDB as the running process
  //XXX - Set running_pdb to the PDB number we are resuming
  running_pdb = pdb_number;
  
  // Exit hypervisor and cause CPU register values (including PC) to be restored from
  // those loaded from p->stored_state
  exit_hypervisor();
}

struct dma_list {
  unsigned char request_format0a;
  unsigned char source_mb_option80;
  unsigned char source_mb;
  unsigned char dest_mb_option81;
  unsigned char dest_mb;
  unsigned char end_of_options00;
  
  unsigned char cmd; // $00 = copy + end of list
  unsigned short size;
  unsigned short source_addr;
  unsigned char source_bank;
  unsigned short dest_addr;
  unsigned char dest_bank;
  unsigned char modulo00;

}

void dma_copy(unsigned long src,unsigned long dest,unsigned short length)
{
  struct dma_list list;
  list.request_format0a=$0a;
  list.source_mb_option80=$80;
  list.dest_mb_option81=$81;
  list.end_of_options00=$00;
  list.cmd=$00;
  list.modulo00=$00;

  list.size=length;
  list.dest_mb=(unsigned char)(dest>>20);
  list.dest_bank=(dest>>16)&0x7f;
  list.dest_addr=(unsigned word)dest;

  // Work around missing fragments in KickC
  list.source_mb=(unsigned char)(src>>20);
  list.source_bank=(src>>16)&0x7f;

  list.source_addr=(unsigned word)src;

  // DMA list lives in hypervisor memory, so use correct list address
  // when triggering
  // (Variables in KickC usually end up in ZP, so we have to provide the
  // base page correction
  if (!(>&list))
    *(unsigned char *)$D701 = $BF+(>&list);
  else
    *(unsigned char *)$D701 = (>&list);
  *(unsigned char *)$D702 = $7F;
  *(unsigned char *)$D704 = $FF;
  *(unsigned char *)$D705 = <&list;
  
}

volatile unsigned char lpeek_value = $12;
unsigned char lpeek(unsigned long address)
{
  // Work around all sorts of fun problems in KickC
  //  dma_copy(address,$BF00+((unsigned short)<&lpeek_value),1);  
  unsigned dword t = (unsigned dword)&lpeek_value;
  if (>((unsigned short)&lpeek_value)) t+=$FFF0000;
  else t += $FFFBF00;

  
  unsigned char *c = $BF00 + (unsigned char *)&t;
  
  dma_copy(address,t,1);

  return lpeek_value;
}

volatile unsigned char *current_screen_line = SCREEN;
volatile unsigned char current_screen_x = 0;

void print_char(char c)
{
   current_screen_line[current_screen_x++]=c;
}

void print_to_screen(char *message)
{
  char *c=message;
  while(*c) {
    current_screen_line[current_screen_x++]=*c;
    c++;
  }
}

void print_newline()
{
  current_screen_line+=40;
  current_screen_x=0;
}


void print_hex(unsigned word value)
{
  char[5] hex;
  unsigned char i;
  for(i=0;i<8;i++) {
    if (value<0xa000) hex[i]='0'+(char)(value>>12);
    else hex[i]=(char)(value>>12)-9;
    value<<=4;
  }
  hex[4]=0;
  print_to_screen(hex);
}

void print_dhex(unsigned dword value)
{
  print_hex((word)(value>>16));
  print_hex((unsigned word)value);
}

unsigned char load_program(unsigned char pdb_number)
{
  // Search through packed programs for the one we need
  unsigned long address=$20000;
  unsigned char i;
  unsigned char match=0;


  struct process_descriptor_block *pdb
    =(struct process_descriptor_block*)
    ((unsigned short)stored_pdbs+(((unsigned short)pdb_number)<<8));



  while(lpeek(address)) {

    // Check for name match
    for(i=0;i<16;i++) {

      unsigned char c1=lpeek(address+i);
      unsigned char *n=pdb->process_name;
      unsigned char c2=n[i];

      if ((c1==0)&&(c2==0))
	{
	  match=1;
	  break;
	}
      if (c1!=c2)
	break;
    }


    if (match) {

      // Found program -- now copy it into place
      unsigned short length;
      unsigned char *hb=((unsigned char *)&length)+1;
      length = lpeek(address+16);
      *hb = lpeek(address+17);

      // XXX - Make sure it fits the allocated memory
      
      // Copy program into place.
      // As the program is formatted as a C64 program with a 
      // $0801 header, we copy it to offset $07FF.

      unsigned dword dest=pdb->storage_start_address;
      dest+=$07FF;

      dma_copy(address+32,dest,length);

      // Mark process as now runnable
      pdb->process_state=STATE_READY;

      return 0;
    }

    unsigned long new_address=(dword)lpeek(address+18);
    new_address|=((dword)(lpeek(address+19)))<<8;
    new_address|=((dword)(lpeek(address+20)))<<16;

    address=new_address;

  }

  // Failed to find program
  return 1;
}

void main() {

}

void exit_hypervisor()
{
	// Exit hypervisor
	*(char *)$D67F = $01;
}

//XXX -  Copy your syscall handler functions from os5.2.kc
//XXX - Don't forget to add describe_pdb(running_pdb); to your handler for SYSCALL $03

void SYSCALL00(){exit_hypervisor();}
void SYSCALL01(){exit_hypervisor();}
void SYSCALL02(){exit_hypervisor();}
void SYSCALL03(){exit_hyperviso{
describe_pdb(running_pdb);
exit_hypervisor();}
void SYSCALL04(){exit_hypervisor();}
void SYSCALL05(){exit_hypervisor();}
void SYSCALL06(){exit_hypervisor();}
void SYSCALL07(){exit_hypervisor();}
void SYSCALL08(){exit_hypervisor();}
void SYSCALL09(){exit_hypervisor();}
void SYSCALL0A(){exit_hypervisor();}
void SYSCALL0B(){exit_hypervisor();}
void SYSCALL0C(){exit_hypervisor();}
void SYSCALL0D(){exit_hypervisor();}
void SYSCALL0E(){exit_hypervisor();}
void SYSCALL0F(){exit_hypervisor();}
void SYSCALL10(){exit_hypervisor();}
void SECURENTR(){exit_hypervisor();}
void SECUREXIT(){exit_hypervisor();}
void SYSCALL13(){exit_hypervisor();}
void SYSCALL14(){exit_hypervisor();}
void SYSCALL15(){exit_hypervisor();}
void SYSCALL16(){exit_hypervisor();}
void SYSCALL17(){exit_hypervisor();}
void SYSCALL18(){exit_hypervisor();}
void SYSCALL19(){exit_hypervisor();}
void SYSCALL1A(){exit_hypervisor();}
void SYSCALL1B(){exit_hypervisor();}
void SYSCALL1C(){exit_hypervisor();}
void SYSCALL1D(){exit_hypervisor();}
void SYSCALL1E(){exit_hypervisor();}
void SYSCALL1F(){exit_hypervisor();}
void SYSCALL20(){exit_hypervisor();}
void SYSCALL21(){exit_hypervisor();}
void SYSCALL22(){exit_hypervisor();}
void SYSCALL23(){exit_hypervisor();}
void SYSCALL24(){exit_hypervisor();}
void SYSCALL25(){exit_hypervisor();}
void SYSCALL26(){exit_hypervisor();}
void SYSCALL27(){exit_hypervisor();}
void SYSCALL28(){exit_hypervisor();}
void SYSCALL29(){exit_hypervisor();}
void SYSCALL2A(){exit_hypervisor();}
void SYSCALL2B(){exit_hypervisor();}
void SYSCALL2C(){exit_hypervisor();}
void SYSCALL2D(){exit_hypervisor();}
void SYSCALL2E(){exit_hypervisor();}
void SYSCALL2F(){exit_hypervisor();}
void SYSCALL30(){exit_hypervisor();}
void SYSCALL31(){exit_hypervisor();}
void SYSCALL32(){exit_hypervisor();}
void SYSCALL33(){exit_hypervisor();}
void SYSCALL34(){exit_hypervisor();}
void SYSCALL35(){exit_hypervisor();}
void SYSCALL36(){exit_hypervisor();}
void SYSCALL37(){exit_hypervisor();}
void SYSCALL38(){exit_hypervisor();}
void SYSCALL39(){exit_hypervisor();}
void SYSCALL3A(){exit_hypervisor();}
void SYSCALL3B(){exit_hypervisor();}
void SYSCALL3C(){exit_hypervisor();}
void SYSCALL3D(){exit_hypervisor();}
void SYSCALL3E(){exit_hypervisor();}
void SYSCALL3F(){exit_hypervisor();}
void PAGFAULT(){exit_hypervisor();}
void RESTORKEY(){exit_hypervisor();}
void ALTTABKEY(){exit_hypervisor();}
void VF011RD(){exit_hypervisor();}
void VF011WR(){exit_hypervisor();}
void undefined_trap(){exit_hypervisor();}
void CPUKIL(){exit_hypervisor();}
/*
XXX - Copy your RESET() routine from os5.2.kc
XXX - Don't forget to call resume_pdb(0) immediately after load_program(0)
*/
void RESET() {
  *VIC_MEMORY = 0x14;
  
  memset(SCREEN,' ',40*25);
  memset(COLS,WHITE,40*25);
  current_screen_line = SCREEN;
  
/*  char* sc =SCREEN+40;
  char* msg = MESSAGE;
	while(*msg){
	    *sc++ = *msg++;
	}		
*/	
	print_newline();
  print_newline();
  print_newline();	
  initialise_pdb(0,"program1.prg");
  load_program(0);	
	//describe_pdb(0);		
	while(true){
			if(*RASTER==54 || *RASTER==66){
			   *BGCOL = WHITE;
			}else {
				 *BGCOL = BLUE;				
			}
	}
			
	print_to_screen("gall0165 operating system starting...");
	print_newline();
	print_to_screen("testing hardware");	
	
	
	exit_hypervisor();
	
}

#pragma data_seg(Syscall)

//The structure of each entry point is JMP <handler address> + NOP.
//We have a char (xjmp) to hold the opcode for the JMP instruction,
//and then put the address of the SYSCALL/trap handler in the next
//two points as a pointer, and end with the NOP instruction opcode.
struct Syscall {
    char xjmp;          //Holds $4C, the JMP $nnn opcode
    void()* syscall;    //Holds handler address, will be the target of the JMP
    char xnop;          //Holds $EA, the NOP opcode
};

//To save writing 0x4C and 0xEA all the time, we define them as constants 
const char JMP = 0x4c;
const char NOP = 0xea;

//Now we can have a nice table of up to 64 SYSCALL handlers expressed
//in fairly readeable and easy format.
//Each line is an instance of the struct Syscall from above, with the JMP
//opcode value, the address of the handler routine and the NOP opcode value.
export struct Syscall[]SYSCALLS = {
 {JMP, &SYSCALL00, NOP},
 {JMP, &SYSCALL01, NOP},
 {JMP, &SYSCALL02, NOP},
 {JMP, &SYSCALL03, NOP},
 {JMP, &SYSCALL04, NOP},
 {JMP, &SYSCALL05, NOP},
 {JMP, &SYSCALL06, NOP},
 {JMP, &SYSCALL07, NOP},
 {JMP, &SYSCALL08, NOP},
 {JMP, &SYSCALL09, NOP},
 {JMP, &SYSCALL0A, NOP},
 {JMP, &SYSCALL0B, NOP},
 {JMP, &SYSCALL0C, NOP},
 {JMP, &SYSCALL0D, NOP},
 {JMP, &SYSCALL0E, NOP},
 {JMP, &SYSCALL0F, NOP},
 {JMP, &SYSCALL10, NOP},
 {JMP, &SECURENTR, NOP},
 {JMP, &SECUREXIT, NOP},
 {JMP, &SYSCALL13, NOP},
 {JMP, &SYSCALL14, NOP},
 {JMP, &SYSCALL15, NOP},
 {JMP, &SYSCALL16, NOP},
 {JMP, &SYSCALL17, NOP},
 {JMP, &SYSCALL18, NOP},
 {JMP, &SYSCALL19, NOP},
 {JMP, &SYSCALL1A, NOP},
 {JMP, &SYSCALL1B, NOP},
 {JMP, &SYSCALL1C, NOP},
 {JMP, &SYSCALL1D, NOP},
 {JMP, &SYSCALL1E, NOP},
 {JMP, &SYSCALL1F, NOP},
 {JMP, &SYSCALL20, NOP},
 {JMP, &SYSCALL21, NOP},
 {JMP, &SYSCALL22, NOP},
 {JMP, &SYSCALL23, NOP},
 {JMP, &SYSCALL24, NOP},
 {JMP, &SYSCALL25, NOP},
 {JMP, &SYSCALL26, NOP},
 {JMP, &SYSCALL27, NOP},
 {JMP, &SYSCALL28, NOP}, 
 {JMP, &SYSCALL29, NOP},
 {JMP, &SYSCALL2A, NOP},
 {JMP, &SYSCALL2B, NOP},
 {JMP, &SYSCALL2C, NOP},
 {JMP, &SYSCALL2D, NOP},
 {JMP, &SYSCALL2E, NOP},
 {JMP, &SYSCALL2F, NOP},
 {JMP, &SYSCALL30, NOP},
 {JMP, &SYSCALL31, NOP},
 {JMP, &SYSCALL32, NOP},
 {JMP, &SYSCALL33, NOP},
 {JMP, &SYSCALL34, NOP},
 {JMP, &SYSCALL35, NOP},
 {JMP, &SYSCALL36, NOP},
 {JMP, &SYSCALL37, NOP},
 {JMP, &SYSCALL38, NOP},
 {JMP, &SYSCALL39, NOP},
 {JMP, &SYSCALL3A, NOP},
 {JMP, &SYSCALL3B, NOP},
 {JMP, &SYSCALL3C, NOP},
 {JMP, &SYSCALL3D, NOP},
 {JMP, &SYSCALL3E, NOP},
 {JMP, &SYSCALL3F, NOP}
};

//In this example we had only two SYSCALLs defined, so rather than having
//another 62 lines, we can just ask KickC to make the TRAP table begin
//at the next multiple of $100, i.e., at $8100.
export align(0x100) struct Syscall[] TRAPS= {
 {JMP, &RESET, NOP},
 {JMP, &PAGFAULT, NOP},
 {JMP, &RESTORKEY, NOP}, 
 {JMP, &ALTTABKEY, NOP},
 {JMP, &VF011RD, NOP},
 {JMP, &VF011WR, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP}, 
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &CPUKIL, NOP}
};			


XXX - Copy your trap handler functions and entry point tables from os5.2.kc
