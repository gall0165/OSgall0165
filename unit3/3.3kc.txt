import "string"

#pragma link("mega65hyper.ld")
const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char WHITE = 1; //
const char* DEVICE_START=0xd000;

char[] MESSAGE = " checkpoint 3.3 by gall0165";
unsigned char *current_screen_line = $0400;
unsigned char current_screen_x = 0;
unsigned short men_start = $0800;
unsigned short men_end = $0800;

void main(){}

//probing memory
void test_memory()
{
char *sc = men_start;
char chara=$00;
volatile unsigned char *p;
unsigned short err=0;

for (int i=0;i<30720;i++)
{
p=sc;
chara=$00;

for (int j=0;j<255;j++)
{
*p=chara;

if (*p!=chara){

   print_to_screen("the memory error at $");
   print_hex((unsigned short)p);
   print_newline();
   err=1;
   break;
}

chara++;
}

if (err==1) 
{
if(men_end!=$0800) men_end-=1;
break;
}

sc++;

men_end=(unsigned short)sc;
}
   print_to_screen("memory found at $");
   print_hex(men_start);
   print_to_screen("- $");
   print_hex(men_end);
   print_newline();
}

// detect vicii

char detect_vicii(unsigned short address){

volatile unsigned char* p;

unsigned char v1,v2;

p=DEVICE_START-1;

for (unsigned short j=0;j<address;j++){

    p++;
}

unsigned short i;

v1=p[$12];

for (i=1;i<1000;i++) continue;

v2=p[$12];

if (v2>v1){

   print_to_screen("vic-ii detected at ");

   print_hex((unsigned short)p);

   print_newline();

   return '1';
} 

else if (v1>v2) {
   v1=p[$12];

   for (i=1;i<1000;i++) continue;

   v2=p[$12];

   if (v2>v1){

   print_to_screen("vic-ii detected at ");

   print_hex((unsigned short)p);

   print_newline();

   return '1';

   } else return '2';

} else return '2';
}


//detect_devices

void detect_devices()
{
unsigned short address;
char result='0';

for (int i=1;i<4081;i+=16)
{
address=(unsigned short)i;

if (result!='1') result=detect_vicii(address);
}


if (result=='2')
{
   print_to_screen("no device found");
   print_newline();
} 

print_to_screen("finished probing for devices");

print_newline();
}



// print hex

void print_hex(unsigned short value){

char[5] hex;

unsigned char i;

for (i=0;i<4;i++){

  if (value<0xa000) hex[i]='0'+(char)(value>>12);

  else hex[i]=(char)(value>>12)-9;

  value<<=4;
}


hex[4]=0;

print_to_screen(hex);
}


void exit_hypervisor(){

   *(unsigned char *)$D67F = $01;
}


void print_to_screen(char *message) {

  char* sc =current_screen_line+current_screen_x;

  char* msg = message;

  while(*msg){

    *sc++=*msg++;

  current_screen_x ++;

  }

  while(current_screen_x>=40){

     current_screen_x-=40;

     current_screen_line +=1;
}
}

void print_newline()
{

current_screen_line+=40;

current_screen_x = 0;


while(current_screen_line>=(SCREEN+40*25))
{

clean();

current_screen_line-=25;
}
}


void RESET() 
{
  *VIC_MEMORY = 0x14;

  memset(SCREEN,' ',40*25);

  memset(COLS,WHITE,40*25);

  char* sc =SCREEN+40;

  char* msg = MESSAGE;

  char[] message1 = "gall0165 operating system starting...";

  char[] message2 = "testing hardware";

  print_to_screen(&message1[0]);

  print_newline();

  print_to_screen(&message2[0]); 

  print_newline();

  detect_devices();

exit_hypervisor();
}




//clean

void clean(){

  memset(SCREEN,' ',40*25);

  memset(COLS,WHITE,40*25);

}



void syscall1(){

  *(SCREEN+79) = ')';

exit_hypervisor();

}



void syscall2() {

  *(SCREEN+78)='(';

exit_hypervisor();

}



void syscall3() {

exit_hypervisor();}



void syscall4() {exit_hypervisor();}
void syscall5() {exit_hypervisor();}
void syscall6() {exit_hypervisor();}
void syscall7() {exit_hypervisor();}
void syscall8() {exit_hypervisor();}
void syscall9() {exit_hypervisor();}
void syscall10() {exit_hypervisor();}
void syscall11() {exit_hypervisor();}
void syscall12() {exit_hypervisor();}
void syscall13() {exit_hypervisor();}
void syscall14() {exit_hypervisor();}
void syscall15() {exit_hypervisor();}
void syscall16() {exit_hypervisor();}
void SECURENTR() {exit_hypervisor();}
void SECUREXIT() {exit_hypervisor();}
void syscall19() {exit_hypervisor();}
void syscall20() {exit_hypervisor();}
void syscall21() {exit_hypervisor();}
void syscall22() {exit_hypervisor();}
void syscall23() {exit_hypervisor();}
void syscall24() {exit_hypervisor();}
void syscall25() {exit_hypervisor();}
void syscall26() {exit_hypervisor();}
void syscall27() {exit_hypervisor();}
void syscall28() {exit_hypervisor();}
void syscall29() {exit_hypervisor();}
void syscall30() {exit_hypervisor();}
void syscall31() {exit_hypervisor();}
void syscall32() {exit_hypervisor();}
void syscall33() {exit_hypervisor();}
void syscall34() {exit_hypervisor();}
void syscall35() {exit_hypervisor();}
void syscall36() {exit_hypervisor();}
void syscall37() {exit_hypervisor();}
void syscall38() {exit_hypervisor();}
void syscall39() {exit_hypervisor();}
void syscall40() {exit_hypervisor();}
void syscall41() {exit_hypervisor();}
void syscall42() {exit_hypervisor();}
void syscall43() {exit_hypervisor();}
void syscall44() {exit_hypervisor();}
void syscall45() {exit_hypervisor();}
void syscall46() {exit_hypervisor();}
void syscall47() {exit_hypervisor();}
void syscall48() {exit_hypervisor();}
void syscall49() {exit_hypervisor();}
void syscall50() {exit_hypervisor();}
void syscall51() {exit_hypervisor();}
void syscall52() {exit_hypervisor();}
void syscall53() {exit_hypervisor();}
void syscall54() {exit_hypervisor();}
void syscall55() {exit_hypervisor();}
void syscall56() {exit_hypervisor();}
void syscall57() {exit_hypervisor();}
void syscall58() {exit_hypervisor();}
void syscall59() {exit_hypervisor();}
void syscall60() {exit_hypervisor();}
void syscall61() {exit_hypervisor();}
void syscall62() {exit_hypervisor();}
void syscall63() {exit_hypervisor();}
void syscall64() {exit_hypervisor();}
void PAGFAULT() {exit_hypervisor();}
void RESTORKEY() {exit_hypervisor();}
void ALTTABKEY() {exit_hypervisor();}
void VF011RD() {exit_hypervisor();}
void VF011WR() {exit_hypervisor();}
void undefined_trap() {exit_hypervisor();}
void CPUKIL() {exit_hypervisor();}

#pragma data_seg(Syscall)

struct SysCall {

   char xjmp;

   void()* syscall;

   char xnop;

};

const char JMP = 0x4c;

const char NOP = 0xea;

export struct SysCall[] SYSCALLS = {

{ JMP, &syscall1, NOP },

{ JMP, &syscall2, NOP },

{ JMP, &syscall3, NOP },

{ JMP, &syscall4, NOP },

{ JMP, &syscall5, NOP },

{ JMP, &syscall6, NOP },

{ JMP, &syscall7, NOP },

{ JMP, &syscall8, NOP },

{ JMP, &syscall9, NOP },

{ JMP, &syscall10, NOP },

{ JMP, &syscall11, NOP },

{ JMP, &syscall12, NOP },

{ JMP, &syscall13, NOP },

{ JMP, &syscall14, NOP },

{ JMP, &syscall15, NOP },

{ JMP, &syscall16, NOP },

{ JMP, &SECURENTR, NOP },

{ JMP, &SECUREXIT, NOP },

{ JMP, &syscall19, NOP },

{ JMP, &syscall20, NOP },

{ JMP, &syscall21, NOP },

{ JMP, &syscall22, NOP },

{ JMP, &syscall23, NOP },

{ JMP, &syscall24, NOP },

{ JMP, &syscall25, NOP },

{ JMP, &syscall26, NOP },

{ JMP, &syscall27, NOP },

{ JMP, &syscall28, NOP },

{ JMP, &syscall29, NOP },

{ JMP, &syscall30, NOP },

{ JMP, &syscall31, NOP },

{ JMP, &syscall32, NOP },

{ JMP, &syscall33, NOP },

{ JMP, &syscall34, NOP },

{ JMP, &syscall35, NOP },

{ JMP, &syscall36, NOP },

{ JMP, &syscall37, NOP },

{ JMP, &syscall38, NOP },

{ JMP, &syscall39, NOP },

{ JMP, &syscall40, NOP },

{ JMP, &syscall41, NOP },

{ JMP, &syscall42, NOP },

{ JMP, &syscall43, NOP },

{ JMP, &syscall44, NOP },

{ JMP, &syscall45, NOP },

{ JMP, &syscall46, NOP },

{ JMP, &syscall47, NOP },

{ JMP, &syscall48, NOP },

{ JMP, &syscall49, NOP },

{ JMP, &syscall50, NOP },

{ JMP, &syscall51, NOP },

{ JMP, &syscall52, NOP },

{ JMP, &syscall53, NOP },

{ JMP, &syscall54, NOP },

{ JMP, &syscall55, NOP },

{ JMP, &syscall56, NOP },

{ JMP, &syscall57, NOP },

{ JMP, &syscall58, NOP },

{ JMP, &syscall59, NOP },

{ JMP, &syscall60, NOP },

{ JMP, &syscall61, NOP },

{ JMP, &syscall62, NOP },

{ JMP, &syscall63, NOP },

{ JMP, &syscall64, NOP }

};

export align(0x100) struct SysCall[] TRAPS = {

{ JMP, &RESET, NOP },

{ JMP, &PAGFAULT, NOP },

{ JMP, &RESTORKEY, NOP },

{ JMP, &ALTTABKEY, NOP },

{ JMP, &VF011RD, NOP },

{ JMP, &VF011WR, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &undefined_trap, NOP },

{ JMP, &CPUKIL, NOP }

};