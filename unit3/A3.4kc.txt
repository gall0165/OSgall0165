********************************
Acheckpoitn3.4.kc
3.4 Detecting More devices Core 1 
********************************
import "string"

#pragma link("mega65hyper.ld")

const char* RASTER = 0xd012;

const char* VIC_MEMORY = 0xd018;

const char* SCREEN = 0x0400;

const char* BGCOL = 0xd021;

const char* COLS = 0xd800;

const char BLACK = 0;

const char WHITE = 1;

const char* DEVICE_START=0xd000;

const char* DEVICE_SKIP=0xd800;





char[] MESSAGE = " checkpoint 3.1 by gall0165";

unsigned char *current_screen_line = $0400;

unsigned char current_screen_x = 0;

unsigned short men_start = $0800;

unsigned short men_end = $0800;



void main(){}

//probing memory

void test_memory(){

char *sc = men_start;

char chara=$00;

volatile unsigned char *p;

unsigned short err=0;

for (int i=0;i<30720;i++){

p=sc;

chara=$00;

for (int j=0;j<255;j++){

*p=chara;

if (*p!=chara){

   print_to_screen("the memory error at $");

   print_hex((unsigned short)p);

   print_newline();

   err=1;

   break;

}

chara++;

}

if (err==1) {

if(men_end!=$0800) men_end-=1;

break;

}

sc++;

men_end=(unsigned short)sc;

}

   print_to_screen("memory found at $");

   print_hex(men_start);

   print_to_screen("- $");

   print_hex(men_end);

   print_newline();


}

//detect_devices

void detect_devices(){

unsigned short address;
unsigned short result=$0;
unsigned short count = 0;

for (unsigned short i=$01;i<$ff1;i+=$10){

    if (i==$801) i=$c01;
    address=(unsigned short)i;
    result=$0;

    result=detect_vicii(address);

    if (result!=$0){

       count=count+1;

    }

    i+=result;

}



for (unsigned short i=$01;i<$ff1;i+=$10){

    if (i==$801) i=$c01;

    unsigned char* num = DEVICE_START-1;

    for (unsigned short j=$00;j<i;j++){

        num++;

        }

    print_hex((unsigned short)num);

    current_screen_x = 0;

    address=(unsigned short)i;

    result=$0;

    result=detect_mos6526(address);

    if (result!=$0){

       count=count+1;

    }

    i+=result;

}



if (count==0){

   print_to_screen("no device found");

   print_newline();

}

 

print_to_screen("finished probing for devices");

print_newline();

}



// detect mos6526

unsigned short detect_mos6526(unsigned short address){

volatile unsigned char* p;

unsigned char v1,v2;

p=DEVICE_START-1;

for (unsigned short j=0;j<address;j++){

    p++;

}

unsigned long i;

if (p[$0b]<$01||p[$0b]>$23) {return $0;}

else {

   v1=p[$09];

   for (i=1;i<2000000;i++) {
           v2=p[$09];

           if (v1!=v2){

              print_to_screen("mos6526 detected at ");
              print_hex((unsigned short)p);
              print_to_screen(" --  ");
              p=p+$ff;
              print_hex((unsigned short)p);
              print_newline();
              return $f0;
              break;       
       }     
       }
   }

   return $0;
}

// detect vicii

unsigned short detect_vicii(unsigned short address){

volatile unsigned char* p;

unsigned char v1,v2;

p=DEVICE_START-1;

for (unsigned short j=0;j<address;j++){

    p++;
}

unsigned short i;

v1=p[$12];

for (i=1;i<1000;i++) continue;

v2=p[$12];

if (v1<v2){

   print_to_screen("vic-ii detected at ");

   print_hex((unsigned short)p);

   print_to_screen(" --  ");

   p=p+$80;

   print_hex((unsigned short)p);

   print_newline();

   return $70;

} else if (v1>v2) {

   v1=p[$12];

   for (i=1;i<1000;i++) continue;

   v2=p[$12];

   if (v1<v2){

      print_to_screen("vic-ii detected at ");

      print_hex((unsigned short)p);

      print_to_screen(" --  ");

      p=p+$80;

      print_hex((unsigned short)p);

      print_newline();

      return $80;

      }else {return $0;}

   } else {return $0;}

}



// print hex

void print_hex(unsigned short value){

char[5] hex;

unsigned char i;

for (i=0;i<4;i++){

  if (value<0xa000) hex[i]='0'+(char)(value>>12);

  else hex[i]=(char)(value>>12)-9;

  value<<=4;

}



hex[4]=0;

print_to_screen(hex);



}



void exit_hypervisor(){

   *(unsigned char *)$D67F = $01;

}



void print_to_screen(char *message) {

  char* sc =current_screen_line+current_screen_x;

  char* msg = message;

  while(*msg){

    *sc++=*msg++;

  current_screen_x ++;

  }

  while(current_screen_x>=40){

     current_screen_x-=40;

     current_screen_line +=1;

}



}



void print_newline(){

current_screen_line+=40;

current_screen_x = 0;



while(current_screen_line>=(SCREEN+40*25)){

clean();

current_screen_line-=25;

}



}


void RESET() {



  *VIC_MEMORY = 0x14;

  memset(SCREEN,' ',40*25);

  memset(COLS,WHITE,40*25);

  char* sc =SCREEN+40;

  char* msg = MESSAGE;

  char[] message1 = "gall0165 operating system starting...";

  char[] message2 = "testing hardware";

  print_to_screen(&message1[0]);

  print_newline();

  print_to_screen(&message2[0]); 

  print_newline();

  detect_devices();



exit_hypervisor();}



//clean

void clean(){

  memset(SCREEN,' ',40*25);

  memset(COLS,WHITE,40*25);

}



void syscall1(){

  *(SCREEN+79) = ')';

exit_hypervisor();

}



void syscall2() {

  *(SCREEN+78)='(';

exit_hypervisor();

}



