//*****************************
	//Name : Work Unit 3 Hardware Bringup
	//Checkpoint: 3.5 Detect even more devices & Resource Allocation 
	//Purpuse: Function that detects other devices on the Mega65
	//Version: Alternative 
//******************************

//XMega65 Kernal Development Template
//Each function of the kernal is a no-args function
//The functions are place in the SYSCALLS table surrounded by JMP and NOP

import "string"

//Use a linker definition file(put the previous listing into that file)

#pragma link("mega65hyper.ld")

const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char WHITE = 1;

const char* DEVICE_START=0xd000;
const char* DEVICE_SKIP=0xd800;

const char[] MOS6526 = "mos";
const char[] VICII = "vic"; 
const char[] NON = "nil";

char[] MESSAGE = " checkpoint 3.3 by gall0165";
unsigned char *current_screen_line = $0400;
unsigned char current_screen_x = 0;
unsigned short men_start = $0800;
unsigned short men_end = $8000;


// Device allocation structure

struct device_memory_allocation{
       unsigned short first_address;
       unsigned short last_address;

       char[] device_name;

       };
       

//Device allocations array

struct device_memory_allocation[16] device_memory_allocations={

			{0,0,NON},{0,0,NON},{0,0,NON},{0,0,NON},{0,0,NON},{0,0,NON},

			{0,0,NON},{0,0,NON},{0,0,NON},{0,0,NON},{0,0,NON},{0,0,NON},

			{0,0,NON},{0,0,NON},{0,0,NON},{0,0,NON}

};

//define counts

unsigned char counts = 0;

//define allocation count

unsigned char device_allocation_counts = 0;

void main(){}

//Beggining of Function Definition call Test Memory
void test_memory(){
      char *sc = men_start;
      char chara=$00;
      
      volatile unsigned char *p;
      unsigned short err=0;
      //same hex and dec start from $0800 to $8000 dec )2048 to 32768) = 30720 decimal 
      for (int i=0;i<30720;i++){
						p=sc;
						chara=$00;
						for (int j=0;j<255;j++){
						*p=chara;
						if (*p!=chara){
						   print_to_screen("the memory error at $");
						   print_hex((unsigned short)p);
						   print_newline();
						   err=1;
						   break;
      }

			chara++;

      }

			if (err==1) {
					if(men_end!=$8000) men_end-=1;
					break;
}

			sc++;

			men_end=(unsigned short)sc;

}

		 print_to_screen("memory found at $");
		 print_hex(men_start);
		 print_to_screen("- $");
		 print_hex(men_end);
		 print_newline();

}
//End of Function Definition call Test Memory

//Begginig of Function Definition call detect_devices

void detect_devices(){
      unsigned short address;
      unsigned short result=$0;
      unsigned short count = 0;

      for (unsigned short i=$01;i<$ff1;i+=$10){
			
			{

		  unsigned char* num = DEVICE_START-1;

		  for (unsigned short j=$00;j<i;j++){

		      num++;

		      }//print pointer position

			{


    struct device_memory_allocation *dn;

    for (dn = &device_memory_allocations[0];dn<&device_memory_allocations[0]+counts;dn++){

        unsigned short temp_f = dn->first_address;

        unsigned short temp_l = dn->last_address;

        unsigned short temp_n = (unsigned short) num;
        

        if (temp_n >= temp_f && temp_n <= temp_l) {

           i+=temp_l-temp_n+$1-$10;     

        }

    }


}//decide whether avoid present memory address

    address=(unsigned short)i;

    result=$0;

    result=detect_vicii(address);


    if (result!=$0){

       count=count+1;

    }

    i+=result;

    print_hex((unsigned short)num);

    current_screen_x = 0;

}

    result=$0;

    result=detect_mos6526(address);

    if (result!=$0){

       count=count+1;

    }

    i+=result;

}


if (count==0){

   print_to_screen("no device found");

   print_newline();

}

 {

    struct device_memory_allocation *dn;

    for (dn = &device_memory_allocations[0];dn<&device_memory_allocations[0]+counts;dn++){

        unsigned short temp_f = dn->first_address;

        unsigned short temp_l = dn->last_address;

        char[] name = dn->device_name;

        print_to_screen(name);

        print_to_screen(" at ");

        print_hex(temp_f);

        print_to_screen(" to ");

        print_hex(temp_l);

        print_newline();

    }



 } //print allocation structure

print_to_screen("finished probing for devices");

print_newline();

}




//mos6526 memory allocation

void mos_allocation(char *p){   

       device_memory_allocations[counts].device_name = MOS6526;    

       device_memory_allocations[counts].first_address = (unsigned short)p;

       p+=$FF;

       device_memory_allocations[counts].last_address = (unsigned short)p;

       counts+=1;

}




//vicii memory allocation

void vicii_allocation(char *p){

       device_memory_allocations[counts].device_name = VICII;    

       device_memory_allocations[counts].first_address = (unsigned short)p;

       device_memory_allocations[counts].last_address = (unsigned short)(p+$7f);

       counts+=1;

       device_memory_allocations[counts].device_name = VICII;    

       device_memory_allocations[counts].first_address = (unsigned short)(p+$100);

       device_memory_allocations[counts].last_address = (unsigned short)(p+$3ff);

       counts+=1;

       device_memory_allocations[counts].device_name = VICII;    

       device_memory_allocations[counts].first_address = (unsigned short)(p+$800);

       device_memory_allocations[counts].last_address = (unsigned short)(p+$bff);

       counts+=1;      

}




// detect mos6526

unsigned short detect_mos6526(unsigned short address){

volatile unsigned char* p;

unsigned char v1,v2;

p=DEVICE_START-1;

for (unsigned short j=0;j<address;j++){

    p++;

}

unsigned long i;

if (p[$0b]<$01||p[$0b]>$23) {return $0;}

else {

   v1=p[$09];

   for (i=1;i<4000000;i++) {
           v2=p[$09];

           if (v1!=v2){

              print_to_screen("found mos6526 ");

              print_newline();

              mos_allocation(p);

              return $f0;

       }  

       
       }

   }

   return $0;

}

// detect vicii

unsigned short detect_vicii(unsigned short address){

volatile unsigned char* p;

unsigned char v1,v2;

p=DEVICE_START-1;

for (unsigned short j=0;j<address;j++){

    p++;
}

unsigned short i;

v1=p[$12];

for (i=1;i<1000;i++) continue;

v2=p[$12];

if (v1<v2){

   print_to_screen("found vic-ii");

   vicii_allocation(p);

   print_newline();

   return $70;

} else if (v1>v2) {

   v1=p[$12];

   for (i=1;i<1000;i++) continue;

   v2=p[$12];

   if (v1<v2){

      print_to_screen("found vic-ii");

      print_newline();

      vicii_allocation(p);

      return $70;

      }else {return $0;}

   } else {return $0;}

}


// print hex

void print_hex(unsigned short value){
    char[5] hex;

    unsigned char i;

    for (i=0;i<4;i++){

      if (value<0xa000) hex[i]='0'+(char)(value>>12);

      else hex[i]=(char)(value>>12)-9;

      value<<=4;

}

hex[4]=0;
print_to_screen(hex);

}



void exit_hypervisor(){

   *(unsigned char *)$D67F = $01;

}



void print_to_screen(char *message) {

  char* sc =current_screen_line+current_screen_x;

  char* msg = message;

  while(*msg){

    *sc++=*msg++;

  current_screen_x ++;

  }

  while(current_screen_x>=40){

     current_screen_x-=40;

     current_screen_line +=1;

}



}



void print_newline(){
			current_screen_line+=40;
			current_screen_x = 0;

			while(current_screen_line>=(SCREEN+40*25)){
			clean();
			current_screen_line-=25;
			}

}




//clean

void clean(){
		memset(SCREEN,' ',40*25);
		memset(COLS,WHITE,40*25);
}




void RESET() {
  *VIC_MEMORY = 0x14;
  memset(SCREEN,' ',40*25);
  memset(COLS,WHITE,40*25);

  char* sc =SCREEN+40;
  char* msg = MESSAGE;
  char[] message1 = "gall0165 operating system starting...";
  char[] message2 = "testing hardware";

  print_to_screen(&message1[0]);
  print_newline();
  print_to_screen(&message2[0]); 
  print_newline();

  for (unsigned short k=0;k<16;k++){
  
      device_memory_allocations[k].first_address = $0;
      
      device_memory_allocations[k].last_address = $0;
      
      device_memory_allocations[k].device_name[0] = 0;
  
   }

  detect_devices();
	exit_hypervisor();

}

void SYSCALL00(){exit_hypervisor();}
void SYSCALL01(){exit_hypervisor();}
void SYSCALL02(){exit_hypervisor();}
void SYSCALL03(){exit_hypervisor();}
void SYSCALL04(){exit_hypervisor();}
void SYSCALL05(){exit_hypervisor();}
void SYSCALL06(){exit_hypervisor();}
void SYSCALL07(){exit_hypervisor();}
void SYSCALL08(){exit_hypervisor();}
void SYSCALL09(){exit_hypervisor();}
void SYSCALL0A(){exit_hypervisor();}
void SYSCALL0B(){exit_hypervisor();}
void SYSCALL0C(){exit_hypervisor();}
void SYSCALL0D(){exit_hypervisor();}
void SYSCALL0E(){exit_hypervisor();}
void SYSCALL0F(){exit_hypervisor();}
void SYSCALL10(){exit_hypervisor();}
void SECURENTR(){exit_hypervisor();}
void SECUREXIT(){exit_hypervisor();}
void SYSCALL13(){exit_hypervisor();}
void SYSCALL14(){exit_hypervisor();}
void SYSCALL15(){exit_hypervisor();}
void SYSCALL16(){exit_hypervisor();}
void SYSCALL17(){exit_hypervisor();}
void SYSCALL18(){exit_hypervisor();}
void SYSCALL19(){exit_hypervisor();}
void SYSCALL1A(){exit_hypervisor();}
void SYSCALL1B(){exit_hypervisor();}
void SYSCALL1C(){exit_hypervisor();}
void SYSCALL1D(){exit_hypervisor();}
void SYSCALL1E(){exit_hypervisor();}
void SYSCALL1F(){exit_hypervisor();}
void SYSCALL20(){exit_hypervisor();}
void SYSCALL21(){exit_hypervisor();}
void SYSCALL22(){exit_hypervisor();}
void SYSCALL23(){exit_hypervisor();}
void SYSCALL24(){exit_hypervisor();}
void SYSCALL25(){exit_hypervisor();}
void SYSCALL26(){exit_hypervisor();}
void SYSCALL27(){exit_hypervisor();}
void SYSCALL28(){exit_hypervisor();}
void SYSCALL29(){exit_hypervisor();}
void SYSCALL2A(){exit_hypervisor();}
void SYSCALL2B(){exit_hypervisor();}
void SYSCALL2C(){exit_hypervisor();}
void SYSCALL2D(){exit_hypervisor();}
void SYSCALL2E(){exit_hypervisor();}
void SYSCALL2F(){exit_hypervisor();}
void SYSCALL30(){exit_hypervisor();}
void SYSCALL31(){exit_hypervisor();}
void SYSCALL32(){exit_hypervisor();}
void SYSCALL33(){exit_hypervisor();}
void SYSCALL34(){exit_hypervisor();}
void SYSCALL35(){exit_hypervisor();}
void SYSCALL36(){exit_hypervisor();}
void SYSCALL37(){exit_hypervisor();}
void SYSCALL38(){exit_hypervisor();}
void SYSCALL39(){exit_hypervisor();}
void SYSCALL3A(){exit_hypervisor();}
void SYSCALL3B(){exit_hypervisor();}
void SYSCALL3C(){exit_hypervisor();}
void SYSCALL3D(){exit_hypervisor();}
void SYSCALL3E(){exit_hypervisor();}
void SYSCALL3F(){exit_hypervisor();}
void PAGFAULT(){exit_hypervisor();}
void RESTORKEY(){exit_hypervisor();}
void ALTTABKEY(){exit_hypervisor();}
void VF011RD(){exit_hypervisor();}
void VF011WR(){exit_hypervisor();}
void undefined_trap(){exit_hypervisor();}
void CPUKIL(){exit_hypervisor();}

//Now we select the SYSCALL segment to hold the SYSCALL/trap entry point table.
#pragma data_seg(Syscall)

//The structure of each entry point is JMP <handler address> + NOP.
//We have a char (xjmp) to hold the opcode for the JMP instruction,
//and then put the address of the SYSCALL/trap handler in the next
//two points as a pointer, and end with the NOP instruction opcode.
struct Syscall {
    char xjmp;          //Holds $4C, the JMP $nnn opcode
    void()* syscall;    //Holds handler address, will be the target of the JMP
    char xnop;          //Holds $EA, the NOP opcode
};

//To save writing 0x4C and 0xEA all the time, we define them as constants 
const char JMP = 0x4c;
const char NOP = 0xea;

//Now we can have a nice table of up to 64 SYSCALL handlers expressed
//in fairly readeable and easy format.
//Each line is an instance of the struct Syscall from above, with the JMP
//opcode value, the address of the handler routine and the NOP opcode value.
export struct Syscall[]SYSCALLS = {
 {JMP, &SYSCALL00, NOP},
 {JMP, &SYSCALL01, NOP},
 {JMP, &SYSCALL02, NOP},
 {JMP, &SYSCALL03, NOP},
 {JMP, &SYSCALL04, NOP},
 {JMP, &SYSCALL05, NOP},
 {JMP, &SYSCALL06, NOP},
 {JMP, &SYSCALL07, NOP},
 {JMP, &SYSCALL08, NOP},
 {JMP, &SYSCALL09, NOP},
 {JMP, &SYSCALL0A, NOP},
 {JMP, &SYSCALL0B, NOP},
 {JMP, &SYSCALL0C, NOP},
 {JMP, &SYSCALL0D, NOP},
 {JMP, &SYSCALL0E, NOP},
 {JMP, &SYSCALL0F, NOP},
 {JMP, &SYSCALL10, NOP},
 {JMP, &SECURENTR, NOP},
 {JMP, &SECUREXIT, NOP},
 {JMP, &SYSCALL13, NOP},
 {JMP, &SYSCALL14, NOP},
 {JMP, &SYSCALL15, NOP},
 {JMP, &SYSCALL16, NOP},
 {JMP, &SYSCALL17, NOP},
 {JMP, &SYSCALL18, NOP},
 {JMP, &SYSCALL19, NOP},
 {JMP, &SYSCALL1A, NOP},
 {JMP, &SYSCALL1B, NOP},
 {JMP, &SYSCALL1C, NOP},
 {JMP, &SYSCALL1D, NOP},
 {JMP, &SYSCALL1E, NOP},
 {JMP, &SYSCALL1F, NOP},
 {JMP, &SYSCALL20, NOP},
 {JMP, &SYSCALL21, NOP},
 {JMP, &SYSCALL22, NOP},
 {JMP, &SYSCALL23, NOP},
 {JMP, &SYSCALL24, NOP},
 {JMP, &SYSCALL25, NOP},
 {JMP, &SYSCALL26, NOP},
 {JMP, &SYSCALL27, NOP},
 {JMP, &SYSCALL28, NOP}, 
 {JMP, &SYSCALL29, NOP},
 {JMP, &SYSCALL2A, NOP},
 {JMP, &SYSCALL2B, NOP},
 {JMP, &SYSCALL2C, NOP},
 {JMP, &SYSCALL2D, NOP},
 {JMP, &SYSCALL2E, NOP},
 {JMP, &SYSCALL2F, NOP},
 {JMP, &SYSCALL30, NOP},
 {JMP, &SYSCALL31, NOP},
 {JMP, &SYSCALL32, NOP},
 {JMP, &SYSCALL33, NOP},
 {JMP, &SYSCALL34, NOP},
 {JMP, &SYSCALL35, NOP},
 {JMP, &SYSCALL36, NOP},
 {JMP, &SYSCALL37, NOP},
 {JMP, &SYSCALL38, NOP},
 {JMP, &SYSCALL39, NOP},
 {JMP, &SYSCALL3A, NOP},
 {JMP, &SYSCALL3B, NOP},
 {JMP, &SYSCALL3C, NOP},
 {JMP, &SYSCALL3D, NOP},
 {JMP, &SYSCALL3E, NOP},
 {JMP, &SYSCALL3F, NOP}
};

//In this example we had only two SYSCALLs defined, so rather than having
//another 62 lines, we can just ask KickC to make the TRAP table begin
//at the next multiple of $100, i.e., at $8100.
export align(0x100) struct Syscall[] TRAPS= {
 {JMP, &RESET, NOP},
 {JMP, &PAGFAULT, NOP},
 {JMP, &RESTORKEY, NOP}, 
 {JMP, &ALTTABKEY, NOP},
 {JMP, &VF011RD, NOP},
 {JMP, &VF011WR, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP}, 
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &undefined_trap, NOP},
 {JMP, &CPUKIL, NOP}
};
